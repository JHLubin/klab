Ours
	tev
	ppv
	sbmv
Voigt 2016 
	TEV
	TVMV
	SuMMV

sequ align
check is one loop particularly different?

start just sequence, then compare tvmv and tev structures as validation

specificity determining residues (SRD's) based on sequence alignment
	read up
	run that analysis

Trypsin:
	Catalytic: H57, D102, S195
	34-41: 		loop A
	59-64: 		loop B
	70-71: 		loop E
	91-101: 	loop C
	141-155:	loop D
	162-178: 	loop 3
	184-194: 	loop 1
	217-225: 	loop 2

TEV:
	Catalytic: H46, D81, C151
	25-28: 		loop A
	47-54: 		loop B
	57-63: 		loop E
	77-80: 		loop C
	117-120:	loop D
	125-138: 	loop 3
	142-150: 	loop 1
	171-176: 	loop 2	
	C-term b-finger that contacts substrate (181-221-ter)

psi-dali?
	Download dali, iterate searches 
	PDB90 of TEV, then of each hit (~100)
	z-score threshold 2.5
	Dali aligns--see about how

20190917
	Ran Dali online for TEV PDB (modified 1LVM). 
	Downloaded PDB90 set, 114 aligned PDB files as 0000_master_pdb.pdb
	Saved alignments as 0000_seq_align.txt
	Loaded TEV into PyMOL, and 0000_master_pdb
		Removed all heteroatoms
		Pruned down other PDBs to chain(s) that aligned with TEV
		Changed chain to A for single remaining chain proteins

Can't seem to do search locally. Ran server on first eight listed structures after 1lvm and saved results.
Structures matching:
	1lvo 	170
	1qa7 	124
	1qy6 	2629
	2j92 	121
	3mmg 	132
	4fln 	195
	5hm2 	121
	5ilb 	178 
Non-redundant structures: 	2152
Excluding 1qy6:				232

Running Dali on Klab1
	# Downloaded and extracted ncbi-blast+-2.9.0-src.tar.gz
	cd
	wget http://ekhidna2.biocenter.helsinki.fi/dali/DaliLite.v5.tar.gz
	tar -zxvf DaliLite.v5.tar.gz
	cd DaliLite.v5/bin
	make
	cd ..
	./test.csh > my_test_output
	diff my_test_output test_output # no difference
	cd
	mkdir dali_data
	mkdir dali_data/DAT
	mkdir dali_data/pdb
	cd dali_data
	~/DaliLite.v5/bin/import.pl --rsync --pdbmirrordir pdb --dat DAT --clean # Makes lots of dss files wherever run
	

Todo:
	Remove structurally similar loops
	Collect B-factor of loop residues
	Window average phi-psi for loop endpoint alignment

	Protocol
		Read database
		Perturb launch site
			?Minor shearing to avoid clashing
			Eliminate substantially clashing loops

		CCDEndsGraft
		Design

		Make sure CCDendsgraft 
		Dump ensemble of perturbed loop positionings
		No rigid body perturbation mover
			Nonrandom

	? Ambiguous constraints + stub library (inverse rotamers) + hot spots/hydrophobics (Sarel's influenza paper) --> automated, PlaceOnStub mover? Placed simultaneously
	Multi-loop driven by loop interactions

~/DaliLite.v5/bin/import.pl --pdbfile ../khare_lab/fibrils_collaboration/cat_relaxed.pdb --pdbid 3nzi --dat DAT/ --clean
echo 3nziA > query.list
mkdir htra1_match
mv query.list htra1_match/
mv htra1_query.list htra1_match/
cd htra1_match/
~/DaliLite.v5/bin/dali.pl --query query.list --db htra1_query.list --dat1 ../DAT/ --dat2 ../DAT/ --outfmt 'summary,alignments,equivalences,transrot' --clean 2> err

# Advice for superposition
You would need to code it in PyRosettta though.  The public function is this:
create_atom_id_map  - which uses the set residue selectors to create the atom id map. Use that map for superposition.
But all that is accessible in PyRosetta
	per_residue_metrics::PerResidueRMSDMetric core_metric = per_residue_metrics::PerResidueRMSDMetric();
	core_metric.set_residue_selector_reference( residue_selector_ref_);
	core_metric.set_residue_selector( residue_selector_);
	std::map< id::AtomID, id::AtomID > atom_map = core_metric.create_atom_id_map( pose );
	core::scoring::superimpose_pose(local_pose, *ref_pose_, atom_map);

### Making second iteration for TEV
from glob import glob
with open('loop_swap_protocol/extra_dali_runs/through_50_1qtf.txt','r') as r:
    bigblock = r.readlines()
other_blocks=glob('loop_swap_protocol/extra_dali_runs/20190928_JHL_*.txt')
neighbor_lines = []
for i in other_blocks:
    with open(i, 'r') as r:
        bigblock += r.readlines()
retain = 0
for line in bigblock:
    if line == '\n':
        retain = 0
    if retain:
        neighbor_lines.append(line)
    if line == '    No:  Chain   Z    rmsd lali nres  %id PDB  Description\n':
        retain = 1
neighbors = []
for nl in neighbor_lines:
    neighbor = nl.split()[1]
    if neighbor not in neighbors:
        neighbors.append(neighbor)
ns = sorted(neighbors)
repcount = 0
for i in range(len(ns)):
    if ns[i][:5] == ns[i-1][:5]:
        repcount += 1
len(ns)-repcount # 2372 - 538 = 2194
nsclean=[i.replace('-','') + '\n' for i in ns]
with open('loop_swap_protocol/extra_dali_runs/second_iteration_through_50_list.txt', 'w') as w:
    w.writelines(nsclean)

# Making aligned PDBs -- Didn't quite work, need to split out lines
template = '~/DaliLite.v5/bin/applymatrix.pl ../dali_data/pdb/{0}/pdb{1}.ent.gz < ../dali_data/tev_rd2/1lvmA.txt > ../dali_data/tev_rd2/{1}.pdb'
tev_fldr = '../dali_data/tev_rd2/'
with open(tev_fldr + '1lvmA.txt', 'r') as r:
    tev_report = r.readlines()
tev_sum_lines = tev_report[3:1611]
non_redundant_matches = []
select_tev_matches = []
for tsl in tev_sum_lines:
    n = tsl.split()[1]
    if n[:5] not in non_redundant_matches:
        non_redundant_matches.append(n[:5])
        select_tev_matches.append(tsl)
len(select_tev_matches) #  1316
for stm in select_tev_matches:
    pdbid = stm.split()[1][:4]
    folder = pdbid[1:3]
    chain = stm.split()[1][-1]
    system(template.format(folder, pdbid))
    out_pdb = '../dali_data/tev_rd2/{}.pdb'.format(pdbid)
    with open(out_pdb, 'r') as r:
        full_pdb_lines = r.readlines()
    trimmed_pdb_lines = []
    for line in full_pdb_lines:
        line_list = line.split()
        if line_list[0] == 'ATOM' and line_list[4] == chain:
            trimmed_pdb_lines.append(line)
    with open(out_pdb, 'w') as w:
        w.writelines(trimmed_pdb_lines)

With 20191216 refactor, still need to debug a few analysis failures
Also, may want to reconsider gapped loops (where some residues are not resolved)
	Is rejecting for ANY unresolved residues sufficient for rejection?
N-overlap and C overlap may be switched
Got a bug that's messing up PDB/pose numbering on 1A0J